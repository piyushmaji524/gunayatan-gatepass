<?php
require_once '../includes/config.php';
require_once '../fpdf/fpdf.php';

// Check if user is logged in and has superadmin role
if (!isLoggedIn() || $_SESSION['role'] != 'superadmin') {
    header("Location: ../index.php");
    exit();
}

// Connect to database
$conn = connectDB();

// Get parameters
$report_type = isset($_GET['type']) ? sanitizeInput($_GET['type']) : '';
$from_date = isset($_GET['from_date']) ? sanitizeInput($_GET['from_date']) : date('Y-m-01');
$to_date = isset($_GET['to_date']) ? sanitizeInput($_GET['to_date']) : date('Y-m-d');

// Define report types
$report_types = [
    'gatepass_summary' => 'Gatepass Summary Report',
    'user_activity' => 'User Activity Report',
    'system_usage' => 'System Usage Statistics',
    'verification_time' => 'Gatepass Verification Time Analysis',
    'monthly_stats' => 'Monthly Statistics Report',
    'user_performance' => 'User Performance Metrics'
];

// Validate report type
if (!array_key_exists($report_type, $report_types)) {
    $_SESSION['error'] = "Invalid report type.";
    header("Location: generate_reports.php");
    exit();
}

// Custom PDF class
class ReportPDF extends FPDF {
    private $report_title;
    private $date_range;
    
    function __construct($orientation='P', $unit='mm', $size='A4', $title='', $date_range='') {
        parent::__construct($orientation, $unit, $size);
        $this->report_title = $title;
        $this->date_range = $date_range;
    }
    
    function Header() {
        // Logo
        if (file_exists('../assets/img/logo.png')) {
            $this->Image('../assets/img/logo.png', 10, 10, 30);
        }
        
        // Title
        $this->SetFont('Arial', 'B', 15);
        $this->SetXY(45, 10);
        $this->Cell(150, 10, APP_NAME, 0, 0, 'L');
        
        $this->SetFont('Arial', 'B', 12);
        $this->SetXY(45, 18);
        $this->Cell(150, 10, $this->report_title, 0, 1, 'L');
        
        $this->SetFont('Arial', '', 10);
        $this->SetXY(45, 26);
        $this->Cell(150, 6, $this->date_range, 0, 1, 'L');
        $this->SetXY(45, 32);
        $this->Cell(150, 6, "Generated on: " . date('Y-m-d H:i:s'), 0, 1, 'L');
        $this->SetXY(45, 38);
        $this->Cell(150, 6, "Generated by: " . $_SESSION['name'] . " (" . ucfirst($_SESSION['role']) . ")", 0, 1, 'L');
        
        // Draw line
        $this->Line(10, 48, 200, 48);
        
        $this->SetY(55);
    }
    
    function Footer() {
        // Position at 15 mm from bottom
        $this->SetY(-15);
        // Arial italic 8
        $this->SetFont('Arial', 'I', 8);
        // Page number
        $this->Cell(0, 10, 'Page ' . $this->PageNo() . '/{nb}', 0, 0, 'C');
        
        // Add Timestamp
        $this->Cell(0, 10, 'Generated on: ' . date('Y-m-d H:i:s'), 0, 0, 'R');
    }
    
    function ChapterTitle($title) {
        $this->SetFont('Arial', 'B', 12);
        $this->SetFillColor(200, 220, 255);
        $this->Cell(0, 8, $title, 0, 1, 'L', true);
        $this->Ln(4);
    }
    
    function SectionTitle($title) {
        $this->SetFont('Arial', 'B', 10);
        $this->Cell(0, 6, $title, 0, 1, 'L');
        $this->Ln(2);
    }
    
    function TableHeader($headers, $widths) {
        $this->SetFont('Arial', 'B', 9);
        $this->SetFillColor(230, 230, 230);
        
        foreach ($headers as $i => $header) {
            $this->Cell($widths[$i], 8, $header, 1, 0, 'C', true);
        }
        $this->Ln();
    }
    
    function TableRow($data, $widths) {
        $this->SetFont('Arial', '', 9);
        
        foreach ($data as $i => $value) {
            $this->Cell($widths[$i], 7, $value, 1, 0, 'L');
        }
        $this->Ln();
    }
}

// Initialize report data array - The code to generate the data is mostly the same as in generate_reports.php
$report_title = $report_types[$report_type];
$date_range = "Date Range: " . date('Y-m-d', strtotime($from_date)) . " to " . date('Y-m-d', strtotime($to_date));

// Create new PDF
$pdf = new ReportPDF('P', 'mm', 'A4', $report_title, $date_range);
$pdf->AliasNbPages();
$pdf->AddPage();
$pdf->SetFont('Arial', '', 10);

// Different report types need different data
switch ($report_type) {
    case 'gatepass_summary':
        // Get gatepass counts by status
        $query = "
            SELECT 
                status,
                COUNT(*) as count
            FROM gatepasses
            WHERE created_at BETWEEN ? AND ?
            GROUP BY status
        ";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("ss", $from_date_with_time, $to_date_with_time);
        $from_date_with_time = $from_date . " 00:00:00";
        $to_date_with_time = $to_date . " 23:59:59";
        $stmt->execute();
        $result = $stmt->get_result();
        
        $status_counts = [
            'pending' => 0,
            'approved_by_admin' => 0,
            'approved_by_security' => 0,
            'declined' => 0
        ];
        
        $total_gatepasses = 0;
        while ($row = $result->fetch_assoc()) {
            $status_counts[$row['status']] = $row['count'];
            $total_gatepasses += $row['count'];
        }
        
        // Get gatepass counts by type
        $query = "
            SELECT 
                material_type,
                COUNT(*) as count
            FROM gatepasses
            WHERE created_at BETWEEN ? AND ?
            GROUP BY material_type
        ";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("ss", $from_date_with_time, $to_date_with_time);
        $stmt->execute();
        $result = $stmt->get_result();
        
        $type_counts = [];
        while ($row = $result->fetch_assoc()) {
            $type_counts[$row['material_type']] = $row['count'];
        }
        
        // Add status summary table
        $pdf->ChapterTitle('Gatepass Status Summary');
        
        $headers = ['Status', 'Count', 'Percentage'];
        $widths = [80, 50, 50];
        $pdf->TableHeader($headers, $widths);
        
        foreach ($status_counts as $status => $count) {
            $percentage = ($total_gatepasses > 0) ? round(($count / $total_gatepasses) * 100, 2) . '%' : '0%';
            $status_name = ucfirst(str_replace('_', ' ', $status));
            $pdf->TableRow([$status_name, $count, $percentage], $widths);
        }
        
        $pdf->TableRow(['Total', $total_gatepasses, '100%'], $widths);
        
        $pdf->Ln(10);
        
        // Add material type table
        $pdf->ChapterTitle('Gatepass Material Types');
        
        $headers = ['Material Type', 'Count'];
        $widths = [130, 50];
        $pdf->TableHeader($headers, $widths);
        
        foreach ($type_counts as $type => $count) {
            $pdf->TableRow([$type, $count], $widths);
        }
        
        break;
        
    case 'user_activity':
        // Get user login activity
        $query = "
            SELECT 
                u.id,
                u.name,
                u.username,
                u.role,
                COUNT(l.id) as login_count,
                MAX(l.created_at) as last_login
            FROM users u
            LEFT JOIN logs l ON u.id = l.user_id AND l.action = 'USER_LOGIN' 
                AND l.created_at BETWEEN ? AND ?
            GROUP BY u.id, u.name, u.username, u.role
            ORDER BY login_count DESC
        ";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("ss", $from_date_with_time, $to_date_with_time);
        $from_date_with_time = $from_date . " 00:00:00";
        $to_date_with_time = $to_date . " 23:59:59";
        $stmt->execute();
        $user_activity = $stmt->get_result();
        
        $pdf->ChapterTitle('User Login Activity');
        
        $headers = ['Name', 'Username', 'Role', 'Login Count', 'Last Login'];
        $widths = [50, 40, 30, 30, 40];
        $pdf->TableHeader($headers, $widths);
        
        while ($user = $user_activity->fetch_assoc()) {
            $last_login = empty($user['last_login']) ? 'Never' : date('Y-m-d H:i', strtotime($user['last_login']));
            $pdf->TableRow([
                $user['name'],
                $user['username'],
                ucfirst($user['role']),
                $user['login_count'],
                $last_login
            ], $widths);
        }
        
        break;
        
    case 'verification_time':
        // Get verification time data
        $query = "
            SELECT 
                g.id,
                g.gatepass_number,
                g.admin_approved_at,
                g.security_approved_at,
                TIMESTAMPDIFF(MINUTE, g.admin_approved_at, g.security_approved_at) as verification_minutes
            FROM gatepasses g
            WHERE g.status = 'approved_by_security'
            AND g.admin_approved_at IS NOT NULL
            AND g.security_approved_at IS NOT NULL
            AND g.created_at BETWEEN ? AND ?
            ORDER BY verification_minutes DESC
        ";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("ss", $from_date_with_time, $to_date_with_time);
        $from_date_with_time = $from_date . " 00:00:00";
        $to_date_with_time = $to_date . " 23:59:59";
        $stmt->execute();
        $verification_times = $stmt->get_result();
        
        // Calculate statistics
        $times = [];
        $count = 0;
        
        $pdf->ChapterTitle('Gatepass Verification Time Analysis');
        
        if ($verification_times->num_rows > 0) {
            while ($row = $verification_times->fetch_assoc()) {
                $times[] = $row['verification_minutes'];
                $count++;
            }
            
            $avg_time = array_sum($times) / $count;
            $min_time = min($times);
            $max_time = max($times);
            
            // Reset result pointer
            $verification_times->data_seek(0);
            
            // Summary stats
            $pdf->SectionTitle('Verification Time Statistics');
            
            $headers = ['Average Time (minutes)', 'Minimum Time', 'Maximum Time', 'Total Count'];
            $widths = [50, 45, 45, 40];
            $pdf->TableHeader($headers, $widths);
            
            $pdf->TableRow([
                round($avg_time, 2),
                $min_time,
                $max_time,
                $count
            ], $widths);
            
            $pdf->Ln(10);
            
            // Details table
            $pdf->SectionTitle('Verification Details');
            
            $headers = ['Gatepass Number', 'Admin Approved', 'Security Verified', 'Minutes'];
            $widths = [40, 50, 50, 40];
            $pdf->TableHeader($headers, $widths);
            
            while ($row = $verification_times->fetch_assoc()) {
                $pdf->TableRow([
                    $row['gatepass_number'],
                    date('Y-m-d H:i', strtotime($row['admin_approved_at'])),
                    date('Y-m-d H:i', strtotime($row['security_approved_at'])),
                    $row['verification_minutes']
                ], $widths);
            }
        } else {
            $pdf->Cell(0, 10, 'No verification data available for the selected period.', 0, 1);
        }
        
        break;
        
    case 'monthly_stats':
        // Get monthly statistics
        $query = "
            SELECT 
                DATE_FORMAT(created_at, '%Y-%m') as month,
                COUNT(*) as total,
                SUM(CASE WHEN status = 'approved_by_security' THEN 1 ELSE 0 END) as verified,
                SUM(CASE WHEN status = 'declined' THEN 1 ELSE 0 END) as declined
            FROM gatepasses
            WHERE created_at BETWEEN ? AND ?
            GROUP BY month
            ORDER BY month
        ";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("ss", $from_date_with_time, $to_date_with_time);
        $from_date_with_time = date('Y-m-01', strtotime($from_date . " -11 months")) . " 00:00:00"; // Last 12 months
        $to_date_with_time = $to_date . " 23:59:59";
        $stmt->execute();
        $monthly_stats = $stmt->get_result();
        
        $pdf->ChapterTitle('Monthly Gatepass Statistics');
        
        if ($monthly_stats->num_rows > 0) {
            $headers = ['Month', 'Total Gatepasses', 'Verified', 'Declined', 'Verification Rate'];
            $widths = [40, 40, 40, 35, 35];
            $pdf->TableHeader($headers, $widths);
            
            while ($month = $monthly_stats->fetch_assoc()) {
                $verification_rate = ($month['total'] > 0) ? 
                    round(($month['verified'] / $month['total']) * 100, 1) . '%' : '0%';
                
                $pdf->TableRow([
                    date('F Y', strtotime($month['month'] . '-01')),
                    $month['total'],
                    $month['verified'],
                    $month['declined'],
                    $verification_rate
                ], $widths);
            }
        } else {
            $pdf->Cell(0, 10, 'No monthly statistics available for the selected period.', 0, 1);
        }
        
        break;
        
    case 'user_performance':
        // Get top gatepass creators
        $query = "
            SELECT 
                u.name,
                u.username,
                u.role,
                COUNT(g.id) as gatepass_count
            FROM users u
            JOIN gatepasses g ON u.id = g.created_by
            WHERE g.created_at BETWEEN ? AND ?
            GROUP BY u.id
            ORDER BY gatepass_count DESC
            LIMIT 10
        ";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("ss", $from_date_with_time, $to_date_with_time);
        $from_date_with_time = $from_date . " 00:00:00";
        $to_date_with_time = $to_date . " 23:59:59";
        $stmt->execute();
        $top_creators = $stmt->get_result();
        
        // Get top admin approvers
        $query = "
            SELECT 
                u.name,
                u.username,
                COUNT(g.id) as approval_count,
                AVG(TIMESTAMPDIFF(MINUTE, g.created_at, g.admin_approved_at)) as avg_approval_time
            FROM users u
            JOIN gatepasses g ON u.id = g.admin_approved_by
            WHERE g.admin_approved_at IS NOT NULL
            AND g.created_at BETWEEN ? AND ?
            GROUP BY u.id
            ORDER BY approval_count DESC
            LIMIT 10
        ";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("ss", $from_date_with_time, $to_date_with_time);
        $stmt->execute();
        $top_admins = $stmt->get_result();
        
        // Get top security verifiers
        $query = "
            SELECT 
                u.name,
                u.username,
                COUNT(g.id) as verification_count,
                AVG(TIMESTAMPDIFF(MINUTE, g.admin_approved_at, g.security_approved_at)) as avg_verification_time
            FROM users u
            JOIN gatepasses g ON u.id = g.security_approved_by
            WHERE g.security_approved_at IS NOT NULL
            AND g.admin_approved_at IS NOT NULL
            AND g.created_at BETWEEN ? AND ?
            GROUP BY u.id
            ORDER BY verification_count DESC
            LIMIT 10
        ";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("ss", $from_date_with_time, $to_date_with_time);
        $stmt->execute();
        $top_security = $stmt->get_result();
        
        // Top creators
        $pdf->ChapterTitle('Top Gatepass Creators');
        
        if ($top_creators->num_rows > 0) {
            $headers = ['Name', 'Username', 'Role', 'Gatepasses Created'];
            $widths = [50, 50, 40, 40];
            $pdf->TableHeader($headers, $widths);
            
            while ($creator = $top_creators->fetch_assoc()) {
                $pdf->TableRow([
                    $creator['name'],
                    $creator['username'],
                    ucfirst($creator['role']),
                    $creator['gatepass_count']
                ], $widths);
            }
        } else {
            $pdf->Cell(0, 10, 'No creator data available for the selected period.', 0, 1);
        }
        
        $pdf->Ln(10);
        
        // Top admins
        $pdf->ChapterTitle('Top Admin Approvers');
        
        if ($top_admins->num_rows > 0) {
            $headers = ['Name', 'Username', 'Approvals', 'Avg. Time (minutes)'];
            $widths = [50, 50, 40, 40];
            $pdf->TableHeader($headers, $widths);
            
            while ($admin = $top_admins->fetch_assoc()) {
                $pdf->TableRow([
                    $admin['name'],
                    $admin['username'],
                    $admin['approval_count'],
                    round($admin['avg_approval_time'], 2)
                ], $widths);
            }
        } else {
            $pdf->Cell(0, 10, 'No admin approval data available for the selected period.', 0, 1);
        }
        
        $pdf->Ln(10);
        
        // Top security
        $pdf->ChapterTitle('Top Security Verifiers');
        
        if ($top_security->num_rows > 0) {
            $headers = ['Name', 'Username', 'Verifications', 'Avg. Time (minutes)'];
            $widths = [50, 50, 40, 40];
            $pdf->TableHeader($headers, $widths);
            
            while ($security = $top_security->fetch_assoc()) {
                $pdf->TableRow([
                    $security['name'],
                    $security['username'],
                    $security['verification_count'],
                    round($security['avg_verification_time'], 2)
                ], $widths);
            }
        } else {
            $pdf->Cell(0, 10, 'No security verification data available for the selected period.', 0, 1);
        }
        
        break;
        
    case 'system_usage':
        // Get hourly activity
        $query = "
            SELECT 
                HOUR(created_at) as hour,
                COUNT(*) as count
            FROM logs
            WHERE created_at BETWEEN ? AND ?
            GROUP BY HOUR(created_at)
            ORDER BY hour
        ";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("ss", $from_date_with_time, $to_date_with_time);
        $from_date_with_time = $from_date . " 00:00:00";
        $to_date_with_time = $to_date . " 23:59:59";
        $stmt->execute();
        $hourly_activity = $stmt->get_result();
        
        // Get top actions
        $query = "
            SELECT 
                action,
                COUNT(*) as count
            FROM logs
            WHERE created_at BETWEEN ? AND ?
            GROUP BY action
            ORDER BY count DESC
            LIMIT 10
        ";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("ss", $from_date_with_time, $to_date_with_time);
        $stmt->execute();
        $top_actions = $stmt->get_result();
        
        // Hourly activity
        $pdf->ChapterTitle('Hourly System Activity');
        
        if ($hourly_activity->num_rows > 0) {
            $headers = ['Hour', 'Activity Count'];
            $widths = [95, 95];
            $pdf->TableHeader($headers, $widths);
            
            while ($row = $hourly_activity->fetch_assoc()) {
                $hour_display = sprintf('%02d:00 - %02d:59', $row['hour'], $row['hour']);
                $pdf->TableRow([$hour_display, $row['count']], $widths);
            }
        } else {
            $pdf->Cell(0, 10, 'No hourly activity data available for the selected period.', 0, 1);
        }
        
        $pdf->Ln(10);
        
        // Top actions
        $pdf->ChapterTitle('Top System Actions');
        
        if ($top_actions->num_rows > 0) {
            $headers = ['Action', 'Count'];
            $widths = [150, 40];
            $pdf->TableHeader($headers, $widths);
            
            while ($action = $top_actions->fetch_assoc()) {
                $pdf->TableRow([$action['action'], $action['count']], $widths);
            }
        } else {
            $pdf->Cell(0, 10, 'No action data available for the selected period.', 0, 1);
        }
        
        break;
}

// Output the PDF
$pdf->Output('D', $report_type . '_report_' . date('Y-m-d') . '.pdf');
exit;
?>
